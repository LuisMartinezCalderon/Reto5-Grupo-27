/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {
        try {
            controlador.consultarRequerimiento1().forEach(System.out::println);
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento2() {
        try {
            controlador.consultarRequerimiento2().forEach(System.out::println);
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {
        try {
            controlador.consultarRequerimiento3().forEach(System.out::println);
            
            //System.out.println(controlador.consultarRequerimiento3());
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

}

// Controlador
class ControladorRequerimientos {
    Requerimiento_1Dao re1=new Requerimiento_1Dao();
    Requerimiento_2Dao re2=new Requerimiento_2Dao();
    Requerimiento_3Dao re3=new Requerimiento_3Dao();
    // Su c√≥digo

    public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {

       
        return re1.requerimiento1();
        
    }

    public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {
        return re2.requerimiento2();
    }

    public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
        return re3.requerimiento3();
    }
}


// Modelo
// VO
class Requerimiento_1Vo {
    private int ID_Lider;
    private String Salario;
    private String Ciudad_Residencia;
    public int getID_Lider() {
        return ID_Lider;
    }
    public void setID_Lider(int iD_Lider) {
        ID_Lider = iD_Lider;
    }
    public String getSalario() {
        return Salario;
    }
    public void setSalario(String salario) {
        Salario = salario;
    }
    public String getCiudad_Residencia() {
        return Ciudad_Residencia;
    }
    public void setCiudad_Residencia(String ciudad_Residencia) {
        Ciudad_Residencia = ciudad_Residencia;
    }

    public String toString() {
        return ID_Lider + " " + Salario + " " + Ciudad_Residencia + "";
    }
}
 

    
    

 class Requerimiento_2Vo {
 private int ID_Proyecto;
 private String Nombre_Material;
 private String Importado;
public int getID_Proyecto() {
    return ID_Proyecto;
}
public void setID_Proyecto(int iD_Proyecto) {
    ID_Proyecto = iD_Proyecto;
}
public String getNombre_Material() {
    return Nombre_Material;
}
public void setNombre_Material(String nombre_Material) {
    Nombre_Material = nombre_Material;
}
public String getImportado() {
    return Importado;
}
public void setImportado(String importado) {
    Importado = importado;
}

public String toString() {
    return ID_Proyecto + " " + Nombre_Material + " " + Importado + "";
}


}


class Requerimiento_3Vo {

    private int ID_Proyecto;
    private String Proveedor;
    public int getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(int iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getProveedor() {
        return Proveedor;
    }
    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }
   
    
public String toString() {
    return ID_Proyecto + " " + Proveedor + " ";
}

   
 
}


// DAO
class Requerimiento_1Dao {
    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        ArrayList<Requerimiento_1Vo> consultas = new ArrayList<>();
        String sql = "SELECT ID_Lider,Salario ,Ciudad_Residencia  FROM Lider WHERE Ciudad_Residencia ='Barranquilla' AND Salario>1071 ORDER by Salario ASC";
        Connection con = JDBCUtilities.getConnection();

        try (Statement stm = con.createStatement(); var rs = stm.executeQuery(sql)) {

            while (rs.next()) {
                Requerimiento_1Vo consulta = new Requerimiento_1Vo();
                consulta.setID_Lider(rs.getInt("ID_Lider"));
                consulta.setSalario(rs.getString("Salario"));
                consulta.setCiudad_Residencia(rs.getString("Ciudad_Residencia"));
                consultas.add(consulta);
            }

            consultas.forEach(System.out::println);

        }

        return consultas;
    }

   
 }

class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
        ArrayList<Requerimiento_2Vo> consultas = new ArrayList<>();
        String sql = "SELECT P.ID_Proyecto,mc.Nombre_Material ,mc.Importado FROM Proyecto p ,MaterialConstruccion mc NATURAL JOIN Compra c WHERE p.ID_Proyecto IN(1,184,400) ORDER BY p.ID_Proyecto ASC ";
        Connection con = JDBCUtilities.getConnection();

        try (Statement stm = con.createStatement(); var rs = stm.executeQuery(sql)) {

            while (rs.next()) {
                Requerimiento_2Vo consulta = new Requerimiento_2Vo();
                consulta.setID_Proyecto(rs.getInt("ID_Proyecto"));
                consulta.setNombre_Material(rs.getString("Nombre_Material"));
                consulta.setImportado(rs.getString("Importado"));
                consultas.add(consulta);
            }

        }
        return consultas;
    }
}

class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {
        ArrayList<Requerimiento_3Vo> consultas = new ArrayList<>();
        String sql = "SELECT c.ID_Proyecto ,c.Proveedor FROM Compra c WHERE c.ID_Proyecto BETWEEN 120 AND 124 ORDER by c.ID_Proyecto ASC";
        Connection con = JDBCUtilities.getConnection();

        try (Statement stm = con.createStatement(); var rs = stm.executeQuery(sql)) {

            while (rs.next()) {
                Requerimiento_3Vo consulta = new Requerimiento_3Vo();
                consulta.setID_Proyecto(rs.getInt("ID_Proyecto"));
                consulta.setProveedor(rs.getString("Proveedor"));
                consultas.add(consulta);
            }

        }
        return consultas;
    }
}